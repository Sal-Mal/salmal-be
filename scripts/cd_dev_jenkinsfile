pipeline {
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('DOCKER_HUB_ID')
        docker_image_name = 'tray1147/salmal:latest'

    }

    agent any

    tools {
        gradle 'gradle'
    }

    stages {

        stage('Build and Run Redis Container') {
            steps {
                script {
                    sh 'docker run --name docker_test_redis -p 6379:6379 --network jenkins_default -d --rm redis:alpine'
                }
            }
        }

        stage('GitHub pull') {
            steps {
                checkout scmGit(
                        branches: [[name: 'dev']],
                        extensions: [submodule(parentCredentials: true, trackingSubmodules: true)],
                        userRemoteConfigs: [[credentialsId: 'git_account', url: 'https://github.com/Sal-Mal/salmal-be']]
                )
            }
        }

        stage('Build Gradle') {
            steps {
                sh "SPRING_PROFILES_ACTIVE=dev ./gradlew clean bootJar"
            }
        }

        stage('Build Dockerfile') {
            steps{
                script {
                    docker.build(env.docker_image_name, '-f docker/Dockerfile .')
                }
            }

        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'DOCKER_HUB_ID') {
                        docker.image(env.docker_image_name).push()
                    }
                }
            }
            post {
                success {
                    echo '성공적으로 살말서버 도커 이미지가 도커허브로 푸시되었습니다.'

                }
                failure {
                    echo '이미지 푸시 실패'
                }
            }
        }

        stage('Build And run Dev') {
            steps {
                sshagent(credentials: ['salmal_dev']){
                    sh '''
                       ssh -o StrictHostKeyChecking=no ubuntu@$SERVER_IP
                       ssh ubuntu@$SERVER_IP "sudo docker compose up -d" 
                      '''
                }
            }
        }


    }

    post {
        always {
            sh "docker stop docker_test_redis"
            sh "docker rmi $docker_image_name"
        }
        success {
            echo '살말 Dev 서버 배포 파이프라인 성공'
        }
        failure {
            echo '살말 Dev 서버 배포 파이프라인 실패'
        }
    }
}
